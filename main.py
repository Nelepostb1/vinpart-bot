import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

class RequestForm(StatesGroup):
    vin = State()
    phone = State()
    part = State()
    photo = State()

builder = ReplyKeyboardBuilder()
builder.button(text="‚ÑπÔ∏è –û –Ω–∞—Å")
builder.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
keyboard = builder.as_markup(resize_keyboard=True)

active_chats = {}

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("üåû –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç VINPART ‚Äî –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ VIN.", reply_markup=keyboard)

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about(message: Message):
    await message.answer("üõ† VINPART ‚Äî –ø–æ–¥–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ VIN.\nüìû +7 999 123-45-67")

@dp.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_form(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä:")
    await state.set_state(RequestForm.vin)

@dp.message(RequestForm.vin)
async def process_vin(message: Message, state: FSMContext):
    await state.update_data(vin=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RequestForm.phone)

@dp.message(RequestForm.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:")
    await state.set_state(RequestForm.part)

@dp.message(RequestForm.part)
async def process_part(message: Message, state: FSMContext):
    await state.update_data(part=message.text)
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ –¥–µ—Ç–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å.\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ '–Ω–µ—Ç', –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç.")
    await state.set_state(RequestForm.photo)

@dp.message(RequestForm.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id
    text = (
        f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"VIN: {data['vin']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–î–µ—Ç–∞–ª—å: {data['part']}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{message.chat.id}")
    await bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=text, reply_markup=builder.as_markup())
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@dp.message(RequestForm.photo)
async def no_photo(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        data = await state.get_data()
        text = (
            f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"VIN: {data['vin']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–î–µ—Ç–∞–ª—å: {data['part']}"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{message.chat.id}")
        await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=builder.as_markup())
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await state.clear()

@dp.callback_query(F.data.startswith("reply:"))
async def handle_reply_button(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å!", show_alert=True)
        return
    user_id = int(callback.data.split(":")[1])
    active_chats[ADMIN_ID] = user_id
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî /stopchat")

@dp.message(F.text == "/stopchat")
async def stop_chat(message: Message):
    if ADMIN_ID in active_chats:
        del active_chats[ADMIN_ID]
        await message.answer("‚úÖ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.")

@dp.message(F.photo)
async def relay_photo_to_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        if ADMIN_ID in active_chats and active_chats[ADMIN_ID] == message.from_user.id:
            photo_id = message.photo[-1].file_id
            await bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=f"üñº –§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {message.from_user.id}")
        else:
            photo_id = message.photo[-1].file_id
            builder = InlineKeyboardBuilder()
            builder.button(text="üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{message.from_user.id}")
            await bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=f"üó® –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {message.from_user.id}", reply_markup=builder.as_markup())

@dp.message()
async def relay_messages(message: Message):
    if message.from_user.id == ADMIN_ID and ADMIN_ID in active_chats:
        client_id = active_chats[ADMIN_ID]
        await bot.send_message(chat_id=client_id, text=message.text)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    elif message.from_user.id != ADMIN_ID:
        builder = InlineKeyboardBuilder()
        builder.button(text="üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{message.from_user.id}")
        await bot.send_message(chat_id=ADMIN_ID, text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {message.from_user.id}:\n{message.text}", reply_markup=builder.as_markup())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
